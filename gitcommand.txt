本地库操作

    1.本地库初始化 

      命令：git add ??? git init 
      效果
        lhw@DESKTOP-9S7PFT2 MINGW64 ~/Desktop/gitReview (master)
        $ ls .git/
        config  description  HEAD  hooks  info  objects  refs
      注意：.git 目录中存放的是本地库相关的子目录和文件，不要删除，也不要胡乱修改

      设置签名 用户名 & Email地址

      命令：

        项目级别/仓库级别：仅在当前本地库范围内有效
        git config user.name 
        git config user.email 
        信息保存位置：./.git/config

        系统用户级别：登录当前操作系统的用户范围
        git config --global user.name 
        git config --global user.email 
        信息保存位置：~/.gitconfig

        级别优先级：
           就近原则：项目级别优先于系统用户级别，二者都有时，采用项目级别的签名，
           只有系统用户级别则采用其级别签名为准
           不允许二者都没有

      作用：标识不同开发者身份


    2.基本操作

        git status 查看状态
        git add  文件添加追踪
        git rm --catched ...txt 停止追踪
        git commit 从暂存区提交到本地库

        前进后退记录本质

        通过一个HEAD指针指向某一位置

        基于索引值操作[推荐]
          
          git reset --hard [index]

        使用^符号:只能后退

          git reset --hard HEAD^
          注：一个^表示后退一步

        使用~符号:只能后退
          git reset --hard HEAD~n
          注：表示后退n步
        
        git reset 三个参数对比

         --soft
           仅在本地库移动指针

         --hard 
           在本地库移动HEAD指针 
           重置暂存区
           重置工作区

         --mixed
           在本地库移动HEAD指针
           重置暂存区 

        删除文件并找回
        rm 删除文件

        前提：删除前文件存在时的状态提交到了本地库
        操作：git reset --hard [存在时指针位置]
        指针位置：
        删除操作已经提交到本地库：指针位置指向历史记录
        删除操作尚未提交到本地库：指针位置使用HEAD

        比较操作
        git diff [file]
          将工作区中的文件和暂存区进行比较
        
        git diff [本地库中历史版本记录] [file]
          将工作区中的文件和本地库历史记录比较

        不带文件名比较多个文件


    3.分支管理

      1.什么是分支

        在版本控制过程中，使用多条线同时推进多个任务

      2.分支的好处

        >>同时并行推进多个功能开发，提高开发效率
        >>各个分支在开发过程中，如果一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可

      3.分支操作

        =>创建分支
          git branch

        =>查看分支

          git branch -v 查看所有分支
        
        =>切换分支
          
          git checkout bugger 

        =>合并分支
          1.切换到接受修改的分支上
           git checkout master [branchedname]
          2.执行merge命令
           git merge [branchname]

        =>解决冲突
        